name: Api adapter develop branch pipeline

on:
  push:
    branches: ['develop']
  pull_request:
    branches: ['develop']

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: yarn install
      - run: yarn test
  buildDevelop:
    name: Build/Develop
    if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_MAIN: api-adapter
          ECR_REPOSITORY_NUON: api-adapter-nuon
          ECR_REPOSITORY_MINERTOKEN: api-adapter-minertoken
          IMAGE_TAG: develop
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NUON:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MINERTOKEN:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NUON:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MINERTOKEN:$IMAGE_TAG
  buildProduction:
    name: Build/Production
    if: github.event.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_MAIN: api-adapter
          ECR_REPOSITORY_NUON: api-adapter-nuon
          ECR_REPOSITORY_MINERTOKEN: api-adapter-minertoken
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NUON:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MINERTOKEN:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NUON:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MINERTOKEN:$IMAGE_TAG
  deployDevelop:
    name: Deploy/Develop
    needs: buildDevelop
    runs-on: ubuntu-latest
    steps:
      - name: deploy through ansible server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ANSIBLE_SERVER_HOST }}
          username: ${{ secrets.ANSIBLE_SERVER_USERNAME }}
          key: ${{ secrets.ANSIBLE_SERVER_KEY }}
          port: ${{ secrets.ANSIBLE_SERVER_PORT }}
          script: ansible-playbook -i /opt/truflation-api-adapter/hosts /opt/truflation-api-adapter/develop/truflation-api-adapter-deploy.yml;
  deployProduction:
    name: Deploy/Production
    needs: buildProduction
    runs-on: ubuntu-latest
    steps:
      - name: deploy through ansible server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ANSIBLE_SERVER_HOST }}
          username: ${{ secrets.ANSIBLE_SERVER_USERNAME }}
          key: ${{ secrets.ANSIBLE_SERVER_KEY }}
          port: ${{ secrets.ANSIBLE_SERVER_PORT }}
          script: ansible-playbook -i /opt/truflation-api-adapter/hosts /opt/truflation-api-adapter/production/truflation-api-adapter-deploy.yml;
